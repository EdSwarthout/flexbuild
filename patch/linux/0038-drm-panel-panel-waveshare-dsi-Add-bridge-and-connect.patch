From 9ddd2e93ed67fef18cb1a0ac24c2fe5f22339ab6 Mon Sep 17 00:00:00 2001
From: Joseph Guo <qijian.guo@nxp.com>
Date: Sun, 27 Apr 2025 10:23:55 +0800
Subject: [PATCH 38/40] drm/panel: panel-waveshare-dsi: Add bridge and
 connector

Add bridge and connector functions for panel-waveshare-dsi
With these functions enabled, i.MX8MP don't need to add simple-panel.
Binding process is not in the mode_set callback anymore.

Signed-off-by: Joseph Guo <qijian.guo@nxp.com>
---
 drivers/gpu/drm/panel/panel-waveshare-dsi.c | 482 ++++++++++++++++----
 1 file changed, 397 insertions(+), 85 deletions(-)

diff --git a/drivers/gpu/drm/panel/panel-waveshare-dsi.c b/drivers/gpu/drm/panel/panel-waveshare-dsi.c
index c0fd789a4156..5daef619fedd 100644
--- a/drivers/gpu/drm/panel/panel-waveshare-dsi.c
+++ b/drivers/gpu/drm/panel/panel-waveshare-dsi.c
@@ -1,9 +1,9 @@
 // SPDX-License-Identifier: GPL-2.0
 /*
- * Copyright © 2023 Raspberry Pi Ltd
- *
- * Based on panel-raspberrypi-touchscreen by Broadcom
- */
+* Copyright © 2023 Raspberry Pi Ltd
+* Copyright 2025 NXP
+* Based on panel-raspberrypi-touchscreen by Broadcom
+*/
 
 #include <linux/backlight.h>
 #include <linux/delay.h>
@@ -17,10 +17,17 @@
 #include <linux/of_graph.h>
 #include <linux/pm.h>
 
+#include <drm/drm_bridge.h>
 #include <drm/drm_crtc.h>
 #include <drm/drm_device.h>
 #include <drm/drm_mipi_dsi.h>
 #include <drm/drm_panel.h>
+#include <drm/drm_connector.h>
+#include <drm/drm_drv.h>
+#include <drm/drm_atomic_helper.h>
+#include <drm/drm_probe_helper.h>
+#include <drm/drm_print.h>
+#include <drm/drm_crtc_helper.h>
 
 #define WS_DSI_DRIVER_NAME "ws-ts-dsi"
 
@@ -28,9 +35,16 @@ struct ws_panel {
 	struct drm_panel base;
 	struct mipi_dsi_device *dsi;
 	struct i2c_client *i2c;
-	bool register_done;
 	const struct drm_display_mode *mode;
 	enum drm_panel_orientation orientation;
+	struct drm_bridge bridge;
+	struct drm_connector connector;
+};
+
+struct ws_panel_data {
+	const struct drm_display_mode *mode;
+	int lanes;
+	unsigned long mode_flags;
 };
 
 /* 2.8inch 480x640
@@ -48,6 +62,12 @@ static const struct drm_display_mode ws_panel_2_8_mode = {
 	.vtotal = 640 + 150 + 50 + 150,
 };
 
+static const struct ws_panel_data ws_panel_2_8_data = {
+	.mode = &ws_panel_2_8_mode,
+	.lanes = 2,
+	.mode_flags = MIPI_DSI_MODE_VIDEO_HSE | MIPI_DSI_MODE_VIDEO | MIPI_DSI_CLOCK_NON_CONTINUOUS,
+};
+
 /* 3.4inch 800x800 Round
  * https://www.waveshare.com/product/displays/lcd-oled/3.4inch-dsi-lcd-c.htm
  */
@@ -63,6 +83,12 @@ static const struct drm_display_mode ws_panel_3_4_mode = {
 	.vtotal = 800 + 8 + 4 + 16,
 };
 
+static const struct ws_panel_data ws_panel_3_4_data = {
+	.mode = &ws_panel_3_4_mode,
+	.lanes = 2,
+	.mode_flags = MIPI_DSI_MODE_VIDEO_HSE | MIPI_DSI_MODE_VIDEO | MIPI_DSI_CLOCK_NON_CONTINUOUS,
+};
+
 /* 4.0inch 480x800
  * https://www.waveshare.com/product/raspberry-pi/displays/4inch-dsi-lcd.htm
  */
@@ -78,6 +104,12 @@ static const struct drm_display_mode ws_panel_4_0_mode = {
 	.vtotal = 800 + 20 + 100 + 20,
 };
 
+static const struct ws_panel_data ws_panel_4_0_data = {
+	.mode = &ws_panel_4_0_mode,
+	.lanes = 2,
+	.mode_flags = MIPI_DSI_MODE_VIDEO_HSE | MIPI_DSI_MODE_VIDEO | MIPI_DSI_CLOCK_NON_CONTINUOUS,
+};
+
 /* 7.0inch C 1024x600
  * https://www.waveshare.com/product/raspberry-pi/displays/lcd-oled/7inch-dsi-lcd-c-with-case-a.htm
  */
@@ -93,6 +125,12 @@ static const struct drm_display_mode ws_panel_7_0_c_mode = {
 	.vtotal = 600 + 10 + 10 + 10,
 };
 
+static const struct ws_panel_data ws_panel_7_0_c_data = {
+	.mode = &ws_panel_7_0_c_mode,
+	.lanes = 2,
+	.mode_flags = MIPI_DSI_MODE_VIDEO_HSE | MIPI_DSI_MODE_VIDEO | MIPI_DSI_CLOCK_NON_CONTINUOUS,
+};
+
 /* 7.9inch 400x1280
  * https://www.waveshare.com/product/raspberry-pi/displays/7.9inch-dsi-lcd.htm
  */
@@ -108,6 +146,12 @@ static const struct drm_display_mode ws_panel_7_9_mode = {
 	.vtotal = 1280 + 20 + 10 + 20,
 };
 
+static const struct ws_panel_data ws_panel_7_9_data = {
+	.mode = &ws_panel_7_9_mode,
+	.lanes = 2,
+	.mode_flags = MIPI_DSI_MODE_VIDEO_HSE | MIPI_DSI_MODE_VIDEO | MIPI_DSI_CLOCK_NON_CONTINUOUS,
+};
+
 /* 8.0inch or 10.1inch 1280x800
  * https://www.waveshare.com/product/raspberry-pi/displays/8inch-dsi-lcd-c.htm
  * https://www.waveshare.com/product/raspberry-pi/displays/10.1inch-dsi-lcd-c.htm
@@ -124,6 +168,12 @@ static const struct drm_display_mode ws_panel_10_1_mode = {
 	.vtotal = 800 + 40 + 48 + 40,
 };
 
+static const struct ws_panel_data ws_panel_10_1_data = {
+	.mode = &ws_panel_10_1_mode,
+	.lanes = 2,
+	.mode_flags = MIPI_DSI_MODE_VIDEO_HSE | MIPI_DSI_MODE_VIDEO | MIPI_DSI_CLOCK_NON_CONTINUOUS,
+};
+
 /* 11.9inch 320x1480
  * https://www.waveshare.com/product/raspberry-pi/displays/11.9inch-dsi-lcd.htm
  */
@@ -139,6 +189,12 @@ static const struct drm_display_mode ws_panel_11_9_mode = {
 	.vtotal = 1480 + 60 + 60 + 60,
 };
 
+static const struct ws_panel_data ws_panel_11_9_data = {
+	.mode = &ws_panel_11_9_mode,
+	.lanes = 2,
+	.mode_flags = MIPI_DSI_MODE_VIDEO_HSE | MIPI_DSI_MODE_VIDEO | MIPI_DSI_CLOCK_NON_CONTINUOUS,
+};
+
 static const struct drm_display_mode ws_panel_4_mode = {
 	.clock = 50000,
 	.hdisplay = 720,
@@ -151,6 +207,286 @@ static const struct drm_display_mode ws_panel_4_mode = {
 	.vtotal = 720 + 8 + 4 + 16,
 };
 
+static const struct ws_panel_data ws_panel_4_data = {
+	.mode = &ws_panel_4_mode,
+	.lanes = 2,
+	.mode_flags = MIPI_DSI_MODE_VIDEO_HSE | MIPI_DSI_MODE_VIDEO | MIPI_DSI_CLOCK_NON_CONTINUOUS,
+};
+
+/* 5.0inch 720x1280
+ * https://www.waveshare.com/5inch-dsi-lcd-d.htm
+ */
+static const struct drm_display_mode ws_panel_5_0_mode = {
+	.clock = 83333,
+	.hdisplay = 720,
+	.hsync_start = 720 + 100,
+	.hsync_end = 720 + 100 + 80,
+	.htotal = 720 + 100 + 80 + 100,
+	.vdisplay = 1280,
+	.vsync_start = 1280 + 20,
+	.vsync_end = 1280 + 20 + 20,
+	.vtotal = 1280 + 20 + 20 + 20,
+};
+
+static const struct ws_panel_data ws_panel_5_0_data = {
+	.mode = &ws_panel_5_0_mode,
+	.lanes = 2,
+	.mode_flags = MIPI_DSI_MODE_VIDEO_HSE | MIPI_DSI_MODE_VIDEO | MIPI_DSI_CLOCK_NON_CONTINUOUS,
+};
+
+/* 6.25inch 720x1560
+ * https://www.waveshare.com/6.25inch-dsi-lcd.htm
+ */
+static const struct drm_display_mode ws_panel_6_25_mode = {
+	.clock = 83333,
+	.hdisplay = 720,
+	.hsync_start = 720 + 50,
+	.hsync_end = 720 + 50 + 50,
+	.htotal = 720 + 50 + 50 + 50,
+	.vdisplay = 1560,
+	.vsync_start = 1560 + 20,
+	.vsync_end = 1560 + 20 + 20,
+	.vtotal = 1560 + 20 + 20 + 20,
+};
+
+static const struct ws_panel_data ws_panel_6_25_data = {
+	.mode = &ws_panel_6_25_mode,
+	.lanes = 2,
+	.mode_flags = MIPI_DSI_MODE_VIDEO_HSE | MIPI_DSI_MODE_VIDEO | MIPI_DSI_CLOCK_NON_CONTINUOUS,
+};
+
+/* 8.8inch 480x1920
+ * https://www.waveshare.com/8.8inch-dsi-lcd.htm
+ */
+static const struct drm_display_mode ws_panel_8_8_mode = {
+	.clock = 83333,
+	.hdisplay = 480,
+	.hsync_start = 480 + 50,
+	.hsync_end = 480 + 50 + 50,
+	.htotal = 480 + 50 + 50 + 50,
+	.vdisplay = 1920,
+	.vsync_start = 1920 + 20,
+	.vsync_end = 1920 + 20 + 20,
+	.vtotal = 1920 + 20 + 20 + 20,
+};
+
+static const struct ws_panel_data ws_panel_8_8_data = {
+	.mode = &ws_panel_8_8_mode,
+	.lanes = 2,
+	.mode_flags = MIPI_DSI_MODE_VIDEO_HSE | MIPI_DSI_MODE_VIDEO | MIPI_DSI_CLOCK_NON_CONTINUOUS,
+};
+
+static const struct drm_display_mode ws_panel_13_3_4lane_mode = {
+	.clock = 148500,
+	.hdisplay = 1920,
+	.hsync_start = 1920 + 88,
+	.hsync_end = 1920 + 88 + 44,
+	.htotal = 1920 + 88 + 44 + 148,
+	.vdisplay = 1080,
+	.vsync_start = 1080 + 4,
+	.vsync_end = 1080 + 4 + 5,
+	.vtotal = 1080 + 4 + 5 + 36,
+};
+
+static const struct ws_panel_data ws_panel_13_3_4lane_data = {
+	.mode = &ws_panel_13_3_4lane_mode,
+	.lanes = 4,
+	.mode_flags = MIPI_DSI_MODE_VIDEO  | MIPI_DSI_MODE_LPM,
+};
+
+static const struct drm_display_mode ws_panel_13_3_2lane_mode = {
+	.clock = 83333,
+	.hdisplay = 1920,
+	.hsync_start = 1920 + 88,
+	.hsync_end = 1920 + 88 + 44,
+	.htotal = 1920 + 88 + 44 + 148,
+	.vdisplay = 1080,
+	.vsync_start = 1080 + 4,
+	.vsync_end = 1080 + 4 + 5,
+	.vtotal = 1080 + 4 + 5 + 36,
+};
+
+static const struct ws_panel_data ws_panel_13_3_2lane_data = {
+	.mode = &ws_panel_13_3_2lane_mode,
+	.lanes = 2,
+	.mode_flags = MIPI_DSI_MODE_VIDEO  | MIPI_DSI_MODE_LPM,
+};
+
+/* -----------------------------------------------------------------------------
+ * DRM Connector Operations
+ */
+static struct ws_panel *connector_to_ws_panel(struct drm_connector *connector)
+{
+	return container_of(connector, struct ws_panel, connector);
+}
+
+
+static int ws_get_modes(struct ws_panel *ts, struct drm_connector *connector)
+{
+	u32 bus_format = MEDIA_BUS_FMT_RGB888_1X24;
+	int ret;
+
+	ret = drm_display_info_set_bus_formats(&connector->display_info, &bus_format, 1);
+	if (ret)
+		dev_warn(&ts->i2c->dev,
+			 "failed to set the supported bus format %d\n", ret);
+	return drm_panel_get_modes(&ts->base, connector);
+}
+
+static int ws_connector_get_modes(struct drm_connector *connector)
+{
+	struct ws_panel *ts = connector_to_ws_panel(connector);
+
+	return ws_get_modes(ts, connector);
+}
+
+
+static struct drm_connector_helper_funcs ws_panel_connector_helper_funcs = {
+	.get_modes = ws_connector_get_modes,
+};
+
+static enum drm_connector_status
+ws_panel_connector_detect(struct drm_connector *connector, bool force)
+{
+	return 1;
+}
+
+static const struct drm_connector_funcs ws_panel_connector_funcs = {
+	.fill_modes = drm_helper_probe_single_connector_modes,
+	.detect = ws_panel_connector_detect,
+	.destroy = drm_connector_cleanup,
+	.reset = drm_atomic_helper_connector_reset,
+	.atomic_duplicate_state = drm_atomic_helper_connector_duplicate_state,
+	.atomic_destroy_state = drm_atomic_helper_connector_destroy_state,
+};
+
+static int ws_panel_connector_init(struct ws_panel *ts)
+{
+	struct drm_bridge *bridge = &ts->bridge;
+	int ret;
+
+	if (!bridge->encoder) {
+		DRM_ERROR("Parent encoder object not found");
+		return -ENODEV;
+	}
+
+	ret = drm_connector_init(bridge->dev, &ts->connector,
+				 &ws_panel_connector_funcs,
+				 DRM_MODE_CONNECTOR_DSI);
+	if (ret < 0) {
+		DRM_ERROR("Failed to initialize connector with drm\n");
+		return ret;
+	}
+	drm_connector_helper_add(&ts->connector,
+				 &ws_panel_connector_helper_funcs);
+	drm_connector_attach_encoder(&ts->connector, bridge->encoder);
+
+	return 0;
+}
+
+/* -----------------------------------------------------------------------------
+ * DRM Bridge Operations
+ */
+
+static struct ws_panel *bridge_to_ws_panel(struct drm_bridge *bridge)
+{
+	return container_of(bridge, struct ws_panel, bridge);
+}
+
+static int ws_panel_bridge_attach(struct drm_bridge *bridge,
+	enum drm_bridge_attach_flags flags)
+{
+	struct device_node *endpoint, *dsi_host_node;
+	struct mipi_dsi_host *host;
+	struct mipi_dsi_device_info info = {
+		.type = WS_DSI_DRIVER_NAME,
+		.channel = 0,
+		.node = NULL,
+	};
+	const struct ws_panel_data *_ws_panel_data;
+	struct ws_panel *ts = bridge_to_ws_panel(bridge);
+	struct device *dev = &ts->i2c->dev;
+	int ret = 0;
+
+	if (!(flags & DRM_BRIDGE_ATTACH_NO_CONNECTOR)) {
+		ret = ws_panel_connector_init(ts);
+		if (ret < 0)
+			return ret;
+	}
+	_ws_panel_data = of_device_get_match_data(dev);
+	if (!_ws_panel_data)
+		return -EINVAL;
+
+	endpoint = of_graph_get_next_endpoint(dev->of_node, NULL);
+	if (!endpoint)
+		return -ENODEV;
+
+	dsi_host_node = of_graph_get_remote_port_parent(endpoint);
+	if (!dsi_host_node)
+		return -ENODEV;
+
+	host = of_find_mipi_dsi_host_by_node(dsi_host_node);
+	of_node_put(dsi_host_node);
+	if (!host) {
+		of_node_put(endpoint);
+		return -EPROBE_DEFER;
+	}
+
+	of_node_put(endpoint);
+	ts->dsi = devm_mipi_dsi_device_register_full(dev, host, &info);
+	if (IS_ERR(ts->dsi)) {
+		dev_err(dev, "DSI device registration failed: %ld\n",
+			PTR_ERR(ts->dsi));
+		return PTR_ERR(ts->dsi);
+	}
+	ts->dsi->mode_flags = _ws_panel_data->mode_flags;
+	ts->dsi->format = MIPI_DSI_FMT_RGB888;
+	ts->dsi->lanes = _ws_panel_data->lanes;
+	ret = devm_mipi_dsi_attach(dev, ts->dsi);
+	if (ret < 0)
+		return dev_err_probe(dev, ret, "failed to attach dsi to host\n");
+	return 0;
+}
+
+static enum drm_mode_status
+ws_panel_bridge_mode_valid(struct drm_bridge *bridge,
+			    const struct drm_display_info *info,
+			    const struct drm_display_mode *mode)
+{
+	return MODE_OK;
+}
+
+int ws_bridge_get_modes(struct drm_bridge *bridge,
+				struct drm_connector *connector)
+{
+	struct ws_panel *ts = bridge_to_ws_panel(bridge);
+
+	return ws_get_modes(ts, connector);
+}
+
+static void ws_panel_bridge_enable(struct drm_bridge *bridge)
+{
+	struct ws_panel *ts = bridge_to_ws_panel(bridge);
+
+	drm_panel_prepare(&ts->base);
+	drm_panel_enable(&ts->base);
+}
+
+static void ws_panel_bridge_disable(struct drm_bridge *bridge)
+{
+	struct ws_panel *ts = bridge_to_ws_panel(bridge);
+
+	drm_panel_disable(&ts->base);
+	drm_panel_unprepare(&ts->base);
+}
+
+static const struct drm_bridge_funcs ws_panel_bridge_funcs = {
+	.enable = ws_panel_bridge_enable,
+	.disable = ws_panel_bridge_disable,
+	.attach = ws_panel_bridge_attach,
+	.mode_valid = ws_panel_bridge_mode_valid,
+	.get_modes = ws_bridge_get_modes,
+};
 
 static struct ws_panel *panel_to_ts(struct drm_panel *panel)
 {
@@ -187,60 +523,22 @@ static int ws_panel_prepare(struct drm_panel *panel)
 
 static int ws_panel_enable(struct drm_panel *panel)
 {
+	struct ws_panel *ts = panel_to_ts(panel);
+
+	if (ts->mode == &ws_panel_13_3_2lane_mode)
+		ws_panel_i2c_write(ts, 0xad, 0x02);
+	else
+		ws_panel_i2c_write(ts, 0xad, 0x01);
+
 	return 0;
 }
 
 static int ws_panel_get_modes(struct drm_panel *panel,
-			      struct drm_connector *connector)
+				struct drm_connector *connector)
 {
 	static const u32 bus_format = MEDIA_BUS_FMT_RGB888_1X24;
 	struct ws_panel *ts = panel_to_ts(panel);
 	struct drm_display_mode *mode;
-	struct device_node *endpoint, *dsi_host_node;
-	struct mipi_dsi_host *host;
-	struct mipi_dsi_device_info info = {
-		.type = WS_DSI_DRIVER_NAME,
-		.channel = 0,
-		.node = NULL,
-	};
-	int ret;
-	struct device *dev = &ts->i2c->dev;
-
-	if (!ts->register_done) {
-		/* Look up the DSI host.  It needs to probe before we do. */
-		endpoint = of_graph_get_next_endpoint(dev->of_node, NULL);
-		if (!endpoint)
-			return -ENODEV;
-		dsi_host_node = of_graph_get_remote_port_parent(endpoint);
-		if (!dsi_host_node)
-			goto error;
-
-		host = of_find_mipi_dsi_host_by_node(dsi_host_node);
-		of_node_put(dsi_host_node);
-		if (!host) {
-			of_node_put(endpoint);
-			return -EPROBE_DEFER;
-		}
-
-		info.node = of_graph_get_remote_port(endpoint);
-		if (!info.node)
-			goto error;
-
-		of_node_put(endpoint);
-		ts->dsi = devm_mipi_dsi_device_register_full(dev, host, &info);
-		if (IS_ERR(ts->dsi)) {
-			dev_err(dev, "DSI device registration failed: %ld\n",
-				PTR_ERR(ts->dsi));
-			return PTR_ERR(ts->dsi);
-		}
-
-		ts->dsi->mode_flags =  MIPI_DSI_MODE_VIDEO_HSE
-			| MIPI_DSI_MODE_VIDEO | MIPI_DSI_CLOCK_NON_CONTINUOUS;
-		ts->dsi->format = MIPI_DSI_FMT_RGB888;
-		ts->dsi->lanes = 2;
-		ret = devm_mipi_dsi_attach(dev, ts->dsi);
-		ts->register_done = true;
-	}
 
 	mode = drm_mode_duplicate(connector->dev, ts->mode);
 	if (!mode) {
@@ -260,19 +558,15 @@ static int ws_panel_get_modes(struct drm_panel *panel,
 	connector->display_info.width_mm = 154;
 	connector->display_info.height_mm = 86;
 	drm_display_info_set_bus_formats(&connector->display_info,
-					 &bus_format, 1);
+					&bus_format, 1);
 
 	/*
-	 * TODO: Remove once all drm drivers call
-	 * drm_connector_set_orientation_from_panel()
-	 */
+	* TODO: Remove once all drm drivers call
+	* drm_connector_set_orientation_from_panel()
+	*/
 	drm_connector_set_panel_orientation(connector, ts->orientation);
 
 	return 1;
-error:
-	of_node_put(endpoint);
-
-	return -ENODEV;
 }
 
 static enum drm_panel_orientation ws_panel_get_orientation(struct drm_panel *panel)
@@ -305,6 +599,7 @@ static const struct backlight_ops ws_panel_bl_ops = {
 	.update_status = ws_panel_bl_update_status,
 };
 
+
 static struct backlight_device *
 ws_panel_create_backlight(struct ws_panel *ts)
 {
@@ -316,20 +611,25 @@ ws_panel_create_backlight(struct ws_panel *ts)
 	};
 
 	return devm_backlight_device_register(dev, dev_name(dev), dev, ts,
-					      &ws_panel_bl_ops, &props);
+						&ws_panel_bl_ops, &props);
 }
 
 static int ws_panel_probe(struct i2c_client *i2c)
 {
 	struct device *dev = &i2c->dev;
 	struct ws_panel *ts;
+	const struct ws_panel_data *_ws_panel_data;
 	int ret;
 
 	ts = devm_kzalloc(dev, sizeof(*ts), GFP_KERNEL);
 	if (!ts)
 		return -ENOMEM;
-	ts->register_done = false;
-	ts->mode = of_device_get_match_data(dev);
+
+	_ws_panel_data = of_device_get_match_data(dev);
+	if (!_ws_panel_data)
+		return -EINVAL;
+
+	ts->mode = _ws_panel_data->mode;
 	if (!ts->mode)
 		return -EINVAL;
 
@@ -340,16 +640,14 @@ static int ws_panel_probe(struct i2c_client *i2c)
 	ws_panel_i2c_write(ts, 0xc0, 0x01);
 	ws_panel_i2c_write(ts, 0xc2, 0x01);
 	ws_panel_i2c_write(ts, 0xac, 0x01);
-	ws_panel_i2c_write(ts, 0xad, 0x01);
 
-	ret = of_drm_get_panel_orientation(dev->of_node, &ts->orientation);
-	if (ret) {
-		dev_err(dev, "%pOF: failed to get orientation %d\n", dev->of_node, ret);
-		return ret;
-	}
+	ts->bridge.funcs = &ws_panel_bridge_funcs;
+	ts->bridge.of_node = dev->of_node;
+	ts->bridge.ops = DRM_BRIDGE_OP_MODES;
+	ts->bridge.type = DRM_MODE_CONNECTOR_DSI;
 
 	drm_panel_init(&ts->base, dev, &ws_panel_funcs,
-		       DRM_MODE_CONNECTOR_DSI);
+			DRM_MODE_CONNECTOR_DSI);
 
 	ts->base.backlight = ws_panel_create_backlight(ts);
 	if (IS_ERR(ts->base.backlight)) {
@@ -358,14 +656,13 @@ static int ws_panel_probe(struct i2c_client *i2c)
 		return ret;
 	}
 
-	/* This appears last, as it's what will unblock the DSI host
-	 * driver's component bind function.
-	 */
-	drm_panel_add(&ts->base);
-
+	ret = of_drm_get_panel_orientation(dev->of_node, &ts->orientation);
+	if (ret) {
+		dev_err(dev, "%pOF: failed to get orientation %d\n", dev->of_node, ret);
+		return ret;
+	}
 
-	if (ret)
-		dev_err(dev, "failed to attach dsi to host: %d\n", ret);
+	drm_bridge_add(&ts->bridge);
 
 	return 0;
 }
@@ -389,31 +686,46 @@ static void ws_panel_shutdown(struct i2c_client *i2c)
 static const struct of_device_id ws_panel_of_ids[] = {
 	{
 		.compatible = "waveshare,2.8inch-panel",
-		.data = &ws_panel_2_8_mode,
+		.data = &ws_panel_2_8_data,
 	}, {
 		.compatible = "waveshare,3.4inch-panel",
-		.data = &ws_panel_3_4_mode,
+		.data = &ws_panel_3_4_data,
 	}, {
 		.compatible = "waveshare,4.0inch-panel",
-		.data = &ws_panel_4_0_mode,
+		.data = &ws_panel_4_0_data,
 	}, {
 		.compatible = "waveshare,7.0inch-c-panel",
-		.data = &ws_panel_7_0_c_mode,
+		.data = &ws_panel_7_0_c_data,
 	}, {
 		.compatible = "waveshare,7.9inch-panel",
-		.data = &ws_panel_7_9_mode,
+		.data = &ws_panel_7_9_data,
 	}, {
 		.compatible = "waveshare,8.0inch-panel",
-		.data = &ws_panel_10_1_mode,
+		.data = &ws_panel_10_1_data,
 	}, {
 		.compatible = "waveshare,10.1inch-panel",
-		.data = &ws_panel_10_1_mode,
+		.data = &ws_panel_10_1_data,
 	}, {
 		.compatible = "waveshare,11.9inch-panel",
-		.data = &ws_panel_11_9_mode,
+		.data = &ws_panel_11_9_data,
 	}, {
 		.compatible = "waveshare,4inch-panel",
-		.data = &ws_panel_4_mode,
+		.data = &ws_panel_4_data,
+	}, {
+		.compatible = "waveshare,5.0inch-panel",
+		.data = &ws_panel_5_0_data,
+	}, {
+		.compatible = "waveshare,6.25inch-panel",
+		.data = &ws_panel_6_25_data,
+	}, {
+		.compatible = "waveshare,8.8inch-panel",
+		.data = &ws_panel_8_8_data,
+	}, {
+		.compatible = "waveshare,13.3inch-4lane-panel",
+		.data = &ws_panel_13_3_4lane_data,
+	}, {
+		.compatible = "waveshare,13.3inch-2lane-panel",
+		.data = &ws_panel_13_3_2lane_data,
 	}, {
 		/* sentinel */
 	}
-- 
2.34.1

